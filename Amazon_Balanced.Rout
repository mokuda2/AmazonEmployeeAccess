
R version 4.3.1 (2023-06-16) -- "Beagle Scouts"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(tidyverse)
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
> library(vroom)

Attaching package: ‘vroom’

The following objects are masked from ‘package:readr’:

    as.col_spec, col_character, col_date, col_datetime, col_double,
    col_factor, col_guess, col_integer, col_logical, col_number,
    col_skip, col_time, cols, cols_condense, cols_only, date_names,
    date_names_lang, date_names_langs, default_locale, fwf_cols,
    fwf_empty, fwf_positions, fwf_widths, locale, output_column,
    problems, spec

> library(tidymodels)
── Attaching packages ────────────────────────────────────── tidymodels 1.1.1 ──
✔ broom        1.0.5     ✔ rsample      1.2.0
✔ dials        1.2.0     ✔ tune         1.1.2
✔ infer        1.0.5     ✔ workflows    1.1.3
✔ modeldata    1.2.0     ✔ workflowsets 1.0.1
✔ parsnip      1.1.1     ✔ yardstick    1.2.0
✔ recipes      1.0.8     
── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──
✖ scales::discard() masks purrr::discard()
✖ dplyr::filter()   masks stats::filter()
✖ recipes::fixed()  masks stringr::fixed()
✖ dplyr::lag()      masks stats::lag()
✖ yardstick::spec() masks vroom::spec(), readr::spec()
✖ recipes::step()   masks stats::step()
• Learn how to get started at https://www.tidymodels.org/start/
> library(embed)
> library(discrim)

Attaching package: ‘discrim’

The following object is masked from ‘package:dials’:

    smoothness

> library(naivebayes)
naivebayes 0.9.7 loaded
> library(kknn)
> library(kernlab)

Attaching package: ‘kernlab’

The following object is masked from ‘package:scales’:

    alpha

The following object is masked from ‘package:purrr’:

    cross

The following object is masked from ‘package:ggplot2’:

    alpha

> library(themis)
> 
> amazon_train <- vroom("train.csv")
Rows: 32769 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): ACTION, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTN...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> amazon_train$ACTION <- factor(amazon_train$ACTION)
> 
> amazon_test <- vroom("test.csv")
Rows: 58921 Columns: 10
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl (10): id, RESOURCE, MGR_ID, ROLE_ROLLUP_1, ROLE_ROLLUP_2, ROLE_DEPTNAME,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> my_recipe <- recipe(ACTION ~ ., data = amazon_train) %>%
+   step_mutate_at(all_numeric_predictors(), fn = factor) %>%
+   step_lencode_mixed(all_nominal_predictors(), outcome = vars(ACTION)) %>%
+   #Everything numeric for SMOTE so encode it here
+   step_smote(all_outcomes(), neighbors=5)
> 
> # apply the recipe to your data
> prepped_recipe <- prep(my_recipe)
> baked <- bake(prepped_recipe, new_data = amazon_train)
> 
> ## logistic regression
> log_reg_mod <- logistic_reg() %>% #Type of model
+   set_engine("glm")
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(log_reg_mod) %>%
+   fit(data = amazon_train) # Fit the workflow
> 
> amazon_predictions <- predict(amazon_workflow,
+                               new_data=amazon_test,
+                               type="prob") # "class" or "prob" (see doc)
> 
> amazon_predictions$Action <- if_else(amazon_predictions$.pred_1 >= .95, 1, 0)
> amazon_predictions$Id <- amazon_test$id
> amazon_final <- amazon_predictions %>%
+   select(c(Id, Action))
> 
> write.csv(amazon_final, "logreg.csv", row.names = F)
> 
> ## penalized logistic regression
> # target_encoding_amazon_recipe <- recipe(ACTION~., data=amazon_train) %>%
> #   step_mutate_at(all_numeric_predictors(), fn=factor) %>%
> #   # step_other(all_nominal_predictors(), threshold=.001) %>%
> #   step_lencode_mixed(all_nominal_predictors(), outcome=vars(ACTION))
> # prep <- prep(target_encoding_amazon_recipe)
> # baked_train <- bake(prep, new_data = amazon_train)
> 
> pen_log_reg_model <- logistic_reg(mixture=tune(), penalty=tune()) %>% #Type of model
+   set_engine("glmnet")
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(pen_log_reg_model)
> 
> # Grid of values to tune over
> tuning_grid <- grid_regular(penalty(),
+                             mixture(),
+                             levels = 5) ## L^2 total tuning possibilities
> 
> # Split data for CV
> folds <- vfold_cv(amazon_train, v = 5, repeats=1)
> 
> # Run the CV
> CV_results <- amazon_workflow %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(roc_auc)) #Or leave metrics NULL
> 
> # Find Best Tuning Parameters
> bestTune <- CV_results %>%
+   select_best("roc_auc")
> 
> # Finalize the Workflow & fit it
> final_wf <-amazon_workflow %>%
+   finalize_workflow(bestTune) %>%
+   fit(data=amazon_train)
> 
> # Predict
> amazon_predictions <- final_wf %>%
+   predict(new_data = amazon_test, type="prob")
> 
> amazon_predictions$Action <- amazon_predictions$.pred_1
> amazon_predictions$Id <- amazon_test$id
> amazon_final <- amazon_predictions %>%
+   select(c(Id, Action))
> 
> write.csv(amazon_final, "penalized_log_reg.csv", row.names = F)
> 
> ## random forest classification
> rf_model <- rand_forest(mtry = tune(),
+                         min_n = tune(),
+                         trees=1000) %>%
+   set_engine("ranger") %>%
+   set_mode("classification")
> 
> # Create a workflow with model & recipe
> # target_encoding_amazon_recipe <- recipe(ACTION~., data=amazon_train) %>%
> #   step_mutate_at(all_numeric_predictors(), fn=factor) %>%
> #   step_lencode_mixed(all_nominal_predictors(), outcome=vars(ACTION))
> # prep <- prep(target_encoding_amazon_recipe)
> # baked_train <- bake(prep, new_data = amazon_train)
> 
> amazon_workflow <- workflow() %>%
+   add_recipe(my_recipe) %>%
+   add_model(rf_model)
> 
> # Set up grid of tuning values
> tuning_grid <- grid_regular(mtry(range=c(1,(ncol(amazon_train) - 1))),
+                             min_n(),
+                             levels = 10) ## L^2 total tuning possibilities
> 
> # Set up K-fold CV
> folds <- vfold_cv(amazon_train, v = 10, repeats=1)
> 
> CV_results <- amazon_workflow %>%
+   tune_grid(resamples=folds,
+             grid=tuning_grid,
+             metrics=metric_set(roc_auc)) #Or leave metrics NULL
→ A | warning: Model failed to converge with max|grad| = 0.419436 (tol = 0.002, component 1), Model is nearly unidentifiable: very large eigenvalue
                - Rescale variables?, Model failed to converge with max|grad| = 0.340297 (tol = 0.002, component 1)
There were issues with some computations   A: x1
